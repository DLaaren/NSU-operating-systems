

//This causes the program that is currently being run by the calling process to be replaced with a new program, with newly initialized stack, heap, and (initialized and uninitialized) data segments.
execve("./hello", ["./hello"], 0x7ffc5342a310 /* 82 vars */) = 0

//it is the process asking where its heap memory ends.
brk(NULL)                               = 0x564ed9087000

//устанавливает специфичное для данной архитектуры состояние процесса или треда
arch_prctl(0x3001 /* ARCH_??? */, 0x7ffdeaa61f30) = -1 EINVAL (Invalid argument)

//проверяет, имеет ли процесс права на чтение или запись, или же просто проверяет, существует ли файл
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)

//возвращает файловый дескриптор --- небольшое, неотрицательное значение --- для использования в последующих системных вызовах
//ко всем потокам ввода-вывода можно получить доступ через так называемые файловые дескрипторы
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3

newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=174631, ...}, AT_EMPTY_PATH) = 0

//Функция mmap отражает length байтов, начиная со смещения offset файла (или другого объекта), определенного файловым описателем fd, в память, начиная с адреса start.
mmap(NULL, 174631, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fbc39a0d000

//closes a file descriptor, so that it no longer refers to any file and may be reused
close(3)                                = 0

openat(AT_FDCWD, "/usr/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3

//attempts to read up to count bytes from file descriptor fd into the buffer starting at buf
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P9\2\0\0\0\0\0"..., 832) = 832

//reads up to count bytes from file descriptor fd at offset offset (from the start of the file) into the buffer starting at buf. The file offset is not changed. 
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784

newfstatat(3, "", {st_mode=S_IFREG|0755, st_size=1953112, ...}, AT_EMPTY_PATH) = 0

mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fbc39a0b000

pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784

mmap(NULL, 1994096, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fbc39824000

mmap(0x7fbc39846000, 1417216, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x22000) = 0x7fbc39846000

mmap(0x7fbc399a0000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17c000) = 0x7fbc399a0000

mmap(0x7fbc399f8000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1d4000) = 0x7fbc399f8000

mmap(0x7fbc399fe000, 52592, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fbc399fe000

close(3)                                = 0

mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fbc39822000

arch_prctl(ARCH_SET_FS, 0x7fbc39a0c640) = 0

set_tid_address(0x7fbc39a0c910)         = 5685

set_robust_list(0x7fbc39a0c920, 24)     = 0

rseq(0x7fbc39a0cf60, 0x20, 0, 0x53053053) = 0

mprotect(0x7fbc399f8000, 16384, PROT_READ) = 0

mprotect(0x564ed881c000, 4096, PROT_READ) = 0

mprotect(0x7fbc39a69000, 8192, PROT_READ) = 0

prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0

munmap(0x7fbc39a0d000, 174631)          = 0

newfstatat(1, "", {st_mode=S_IFCHR|0600, st_rdev=makedev(0x88, 0x3), ...}, AT_EMPTY_PATH) = 0

getrandom("\x48\xa7\x50\xb1\xf4\xfb\xcd\x74", 8, GRND_NONBLOCK) = 8

brk(NULL)                               = 0x564ed9087000

brk(0x564ed90a8000)                     = 0x564ed90a8000

//ssize_t write(int fd, const void *buf, size_t count);
//writes up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.
write(1, "Hello World!\n", 13Hello World!) = 13

//exit all threads in a process.
//эквивалентен exit(0)
exit_group(0)                           = ?

+++ exited with 0 +++


